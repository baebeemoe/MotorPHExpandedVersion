/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Form.subform;

import Form.Dashboard;
import Methods.DatabaseManager;
import java.awt.Component;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JComboBox;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;

/**
 *
 * @author Default
 */
public class RequestsforApproval extends javax.swing.JFrame {
 private DatabaseManager dbManager;
    java.sql.Connection con = null;
    Statement stmt = null;
    ResultSet rs = null;  
    /**
     * Creates new form RequestsforApproval
     */
    public RequestsforApproval() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        OvertimePanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        OvertimeTable = new javax.swing.JTable();
        overtimeSaveBtn = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        overtimerequestbtn = new javax.swing.JButton();
        leaverequestsbtn = new javax.swing.JButton();
        leavePanel = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        LeaveTable = new javax.swing.JTable();
        savebtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        OvertimePanel.setPreferredSize(new java.awt.Dimension(464, 510));

        OvertimeTable.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        OvertimeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "OT Request ID", "Employee ID", "Date Filed", "Selected Date", "Start Time", "End Time", "Accumulated OT", "Reason", "remarks"
            }
        ));
        jScrollPane1.setViewportView(OvertimeTable);

        overtimeSaveBtn.setText("Save");
        overtimeSaveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                overtimeSaveBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout OvertimePanelLayout = new javax.swing.GroupLayout(OvertimePanel);
        OvertimePanel.setLayout(OvertimePanelLayout);
        OvertimePanelLayout.setHorizontalGroup(
            OvertimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OvertimePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(OvertimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(overtimeSaveBtn)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1213, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(11, Short.MAX_VALUE))
        );
        OvertimePanelLayout.setVerticalGroup(
            OvertimePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OvertimePanelLayout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 466, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(overtimeSaveBtn))
        );

        getContentPane().add(OvertimePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 1230, 510));

        jPanel1.setBackground(new java.awt.Color(153, 153, 153));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel1.setText("Requests");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, -1, -1));

        overtimerequestbtn.setText("Overtime Requests");
        overtimerequestbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                overtimerequestbtnActionPerformed(evt);
            }
        });
        jPanel1.add(overtimerequestbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(960, 30, -1, -1));

        leaverequestsbtn.setText("Leave Requests");
        leaverequestsbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leaverequestsbtnActionPerformed(evt);
            }
        });
        jPanel1.add(leaverequestsbtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(1110, 30, 120, -1));

        LeaveTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Leave Request ID", "Employee ID", "Date Filed", "Leave Type", "Start Date", "End Date", "Reason", "Remarks"
            }
        ));
        jScrollPane2.setViewportView(LeaveTable);

        savebtn.setText("Save");
        savebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savebtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout leavePanelLayout = new javax.swing.GroupLayout(leavePanel);
        leavePanel.setLayout(leavePanelLayout);
        leavePanelLayout.setHorizontalGroup(
            leavePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leavePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(leavePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(leavePanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(savebtn))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 1218, Short.MAX_VALUE))
                .addContainerGap())
        );
        leavePanelLayout.setVerticalGroup(
            leavePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(leavePanelLayout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 457, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(savebtn)
                .addContainerGap())
        );

        jPanel1.add(leavePanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 1230, 510));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1256, 610));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void overtimerequestbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_overtimerequestbtnActionPerformed

    dbManager = new DatabaseManager();
    con = dbManager.getConnection();
        
    
     try {
       String query = "SELECT * FROM overtimeapplication ";
        PreparedStatement pstmt = con.prepareStatement(query);
     
        
        // Execute the query
      
             
           try (ResultSet resultSet = pstmt.executeQuery()) {
            DefaultTableModel tableModel = (DefaultTableModel) OvertimeTable.getModel();
            
            // Clear existing data
            tableModel.setRowCount(0);
            
            // Get column names if not already set
            if (tableModel.getColumnCount() == 0) {
                int columnCount = resultSet.getMetaData().getColumnCount();
                Vector<String> columnNames = new Vector<>();
                for (int i = 1; i <= columnCount; i++) {
                    columnNames.add(resultSet.getMetaData().getColumnName(i));
                }
                tableModel.setColumnIdentifiers(columnNames);
            }

            // Get rows
            while (resultSet.next()) {
                Vector<Object> row = new Vector<>();
                row.add(resultSet.getInt("overtimerequestID")); // Assuming leaveapplicationID is an int
                row.add(resultSet.getString("employeeID"));
                row.add(resultSet.getDate("datefiled")); // Assuming datefiled is a Date type in your database
                row.add(resultSet.getString("date"));
                row.add(resultSet.getDate("starttime")); // Assuming startdate is a Date type in your database
                row.add(resultSet.getDate("endtime")); // Assuming enddate is a Date type in your database
                row.add(resultSet.getString("accumulatedovertime"));
                row.add(resultSet.getString("reason"));
                row.add(resultSet.getString("remarks"));
                tableModel.addRow(row);
            }
            
            // Find remarks column index
        int remarksColumnIndex = tableModel.findColumn("remarks");
        if (remarksColumnIndex != -1) {
            // Set custom renderer and editor for remarks column
            OvertimeTable.getColumnModel().getColumn(remarksColumnIndex).setCellRenderer(new ComboBoxRenderer());
            OvertimeTable.getColumnModel().getColumn(remarksColumnIndex).setCellEditor(new ComboBoxEditor());
        } else {
            System.err.println("Column 'remarks' not found in table model.");
        }

            leavePanel.setVisible(false);
            OvertimePanel.setVisible(true);
        }
            
        } catch (SQLException ex) {
            Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
        }


        // TODO add your handling code here:
    }//GEN-LAST:event_overtimerequestbtnActionPerformed

    private void leaverequestsbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leaverequestsbtnActionPerformed
    dbManager = new DatabaseManager();
    con = dbManager.getConnection();
        
    
     try {
       String query = "SELECT * FROM leaveapplication";
        PreparedStatement pstmt = con.prepareStatement(query);
       
        
        // Execute the query
      
             
           try (ResultSet resultSet = pstmt.executeQuery()) {
            DefaultTableModel tableModel = (DefaultTableModel) LeaveTable.getModel();
            
            // Clear existing data
            tableModel.setRowCount(0);
            
            // Get column names if not already set
            if (tableModel.getColumnCount() == 0) {
                int columnCount = resultSet.getMetaData().getColumnCount();
                Vector<String> columnNames = new Vector<>();
                for (int i = 1; i <= columnCount; i++) {
                    columnNames.add(resultSet.getMetaData().getColumnName(i));
                }
                tableModel.setColumnIdentifiers(columnNames);
            }

            // Get rows
            while (resultSet.next()) {
                Vector<Object> row = new Vector<>();
                row.add(resultSet.getInt("leaveapplicationID")); // Assuming leaveapplicationID is an int
                row.add(resultSet.getString("employeeID"));
                row.add(resultSet.getDate("datefiled")); // Assuming datefiled is a Date type in your database
                row.add(resultSet.getString("leavetype"));
                row.add(resultSet.getDate("startdate")); // Assuming startdate is a Date type in your database
                row.add(resultSet.getDate("enddate")); // Assuming enddate is a Date type in your database
                row.add(resultSet.getString("reason"));
                row.add(resultSet.getString("remarks"));
                tableModel.addRow(row);
            }
            
            // Find remarks column index
        int remarksColumnIndex = tableModel.findColumn("Remarks");
        if (remarksColumnIndex != -1) {
            // Set custom renderer and editor for remarks column
            LeaveTable.getColumnModel().getColumn(remarksColumnIndex).setCellRenderer(new ComboBoxRenderer());
            LeaveTable.getColumnModel().getColumn(remarksColumnIndex).setCellEditor(new ComboBoxEditor());
        } else {
            System.err.println("Column 'Remarks' not found in table model.");
        }
            
            leavePanel.setVisible(true);
            OvertimePanel.setVisible(false);
        }
            
        } catch (SQLException ex) {
            Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
        }
     
    }//GEN-LAST:event_leaverequestsbtnActionPerformed

    private void savebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savebtnActionPerformed

dbManager = new DatabaseManager();
    con = dbManager.getConnection();
    
    // Update SQL query
    String updateQuery = "UPDATE leaveapplication SET employeeID = ?, datefiled = ?, leavetype = ?, startdate = ?, enddate = ?, reason = ?, remarks = ? WHERE leaveapplicationID = ?";

    try {
        PreparedStatement pstmt = con.prepareStatement(updateQuery);

        DefaultTableModel tableModel = (DefaultTableModel) LeaveTable.getModel();
        int rowCount = tableModel.getRowCount();

        for (int i = 0; i < rowCount; i++) {
            // Get data from each row
            int leaveApplicationID = (int) tableModel.getValueAt(i, 0); // Assuming leaveapplicationID is in the first column
            String employeeID = (String) tableModel.getValueAt(i, 1);
            java.sql.Date dateFiled = new java.sql.Date(((java.util.Date) tableModel.getValueAt(i, 2)).getTime());
            String leaveType = (String) tableModel.getValueAt(i, 3);
            java.sql.Date startDate = new java.sql.Date(((java.util.Date) tableModel.getValueAt(i, 4)).getTime());
            java.sql.Date endDate = new java.sql.Date(((java.util.Date) tableModel.getValueAt(i, 5)).getTime());
            String reason = (String) tableModel.getValueAt(i, 6);
            String remarks = (String) tableModel.getValueAt(i, 7);

            // Set the values for the prepared statement
            pstmt.setString(1, employeeID);
            pstmt.setDate(2, dateFiled);
            pstmt.setString(3, leaveType);
            pstmt.setDate(4, startDate);
            pstmt.setDate(5, endDate);
            pstmt.setString(6, reason);
            pstmt.setString(7, remarks);
            pstmt.setInt(8, leaveApplicationID);

            // Add to batch
            pstmt.addBatch();
        }

        // Execute the batch update
        pstmt.executeBatch();
        JOptionPane.showMessageDialog(null, "Records updated successfully!");

    } catch (SQLException ex) {
        Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(null, "Error updating records: " + ex.getMessage());
    } finally {
        // Close the connection
        try {
            if (con != null && !con.isClosed()) {
                con.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
        }
    }



        // TODO add your handling code here:
    }//GEN-LAST:event_savebtnActionPerformed

    private void overtimeSaveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_overtimeSaveBtnActionPerformed

 dbManager = new DatabaseManager();
    con = dbManager.getConnection();
    
    // Update SQL query
    String updateQuery = "UPDATE overtimeapplication SET employeeID = ?, datefiled = ?, date = ?, starttime = ?, endtime = ?, accumulatedovertime = ?, reason = ?, remarks = ? WHERE overtimerequestID = ?";

    try {
        PreparedStatement pstmt = con.prepareStatement(updateQuery);

        DefaultTableModel tableModel = (DefaultTableModel) OvertimeTable.getModel();
        int rowCount = tableModel.getRowCount();

        for (int i = 0; i < rowCount; i++) {
            // Get data from each row
            int overtimeRequestID = (int) tableModel.getValueAt(i, 0); // Assuming overtimerequestID is in the first column
            String employeeID = (String) tableModel.getValueAt(i, 1);
            java.sql.Date dateFiled = new java.sql.Date(((java.util.Date) tableModel.getValueAt(i, 2)).getTime());
            String date = (String) tableModel.getValueAt(i, 3);
            java.sql.Time startTime = new java.sql.Time(((java.util.Date) tableModel.getValueAt(i, 4)).getTime());
            java.sql.Time endTime = new java.sql.Time(((java.util.Date) tableModel.getValueAt(i, 5)).getTime());
            String accumulatedOvertime = (String) tableModel.getValueAt(i, 6);
            String reason = (String) tableModel.getValueAt(i, 7);
            String remarks = (String) tableModel.getValueAt(i, 8);

            // Set the values for the prepared statement
            pstmt.setString(1, employeeID);
            pstmt.setDate(2, dateFiled);
            pstmt.setString(3, date);
            pstmt.setTime(4, startTime);
            pstmt.setTime(5, endTime);
            pstmt.setString(6, accumulatedOvertime);
            pstmt.setString(7, reason);
            pstmt.setString(8, remarks);
            pstmt.setInt(9, overtimeRequestID);

            // Execute the update statement
            pstmt.executeUpdate();
        }

        JOptionPane.showMessageDialog(null, "Overtime records updated successfully!");

    } catch (SQLException ex) {
        Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
        JOptionPane.showMessageDialog(null, "Error updating overtime records: " + ex.getMessage());
    } finally {
        // Close the connection
        try {
            if (con != null && !con.isClosed()) {
                con.close();
            }
        } catch (SQLException ex) {
            Logger.getLogger(Dashboard.class.getName()).log(Level.SEVERE, null, ex);
        }
    }        // TODO add your handling code here:
    }//GEN-LAST:event_overtimeSaveBtnActionPerformed

    // Custom renderer for JComboBox in table cell
    class ComboBoxRenderer extends JComboBox<String> implements TableCellRenderer {
        
        public ComboBoxRenderer() {
            addItem("Pending");
            addItem("Approved");
            addItem("Denied");
        }
        
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
            setSelectedItem(value);
            return this;
        }
    }
    
   // Custom editor for JComboBox in table cell
    class ComboBoxEditor extends DefaultCellEditor {
        private JComboBox<String> comboBox;
        
        public ComboBoxEditor() {
            super(new JComboBox<String>());
            comboBox = (JComboBox<String>) getComponent();
            comboBox.addItem("Pending");
            comboBox.addItem("Approved");
            comboBox.addItem("Denied");
        } 
    
    
        @Override
        public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
            comboBox.setSelectedItem(value);
            return comboBox;
        }
        
         @Override
        public Object getCellEditorValue() {
            return comboBox.getSelectedItem();
        }
       
    }
    
   

    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RequestsforApproval.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RequestsforApproval.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RequestsforApproval.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RequestsforApproval.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RequestsforApproval().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable LeaveTable;
    private javax.swing.JPanel OvertimePanel;
    private javax.swing.JTable OvertimeTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel leavePanel;
    private javax.swing.JButton leaverequestsbtn;
    private javax.swing.JButton overtimeSaveBtn;
    private javax.swing.JButton overtimerequestbtn;
    private javax.swing.JButton savebtn;
    // End of variables declaration//GEN-END:variables
}
